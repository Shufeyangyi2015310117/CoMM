// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// CoMM_S2_paral_testing
List CoMM_S2_paral_testing(std::string stringname1, std::string stringname2, std::string stringname3, std::string stringname4, std::string stringname5, int bw, double lam, const int coreNum);
RcppExport SEXP _CoMM_CoMM_S2_paral_testing(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP stringname4SEXP, SEXP stringname5SEXP, SEXP bwSEXP, SEXP lamSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname4(stringname4SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname5(stringname5SEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_S2_paral_testing(stringname1, stringname2, stringname3, stringname4, stringname5, bw, lam, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_S2_testing
List CoMM_S2_testing(std::string stringname1, std::string stringname2, std::string stringname3, std::string stringname4, std::string stringname5, int bw, double lam, double alpha);
RcppExport SEXP _CoMM_CoMM_S2_testing(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP stringname4SEXP, SEXP stringname5SEXP, SEXP bwSEXP, SEXP lamSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname4(stringname4SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname5(stringname5SEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_S2_testing(stringname1, stringname2, stringname3, stringname4, stringname5, bw, lam, alpha));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_S4
List CoMM_S4(arma::vec& hatmur, arma::vec& hatmu2r, arma::mat& Rr, arma::mat& R2r, SEXP opts, bool px);
RcppExport SEXP _CoMM_CoMM_S4(SEXP hatmurSEXP, SEXP hatmu2rSEXP, SEXP RrSEXP, SEXP R2rSEXP, SEXP optsSEXP, SEXP pxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type hatmur(hatmurSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hatmu2r(hatmu2rSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Rr(RrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type R2r(R2rSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< bool >::type px(pxSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_S4(hatmur, hatmu2r, Rr, R2r, opts, px));
    return rcpp_result_gen;
END_RCPP
}
// read_eqtls
List read_eqtls(std::string filename, int P);
RcppExport SEXP _CoMM_read_eqtls(SEXP filenameSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(read_eqtls(filename, P));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_S4_testing
List CoMM_S4_testing(std::string stringname1, std::string stringname2, std::string stringname3, std::string stringname4, std::string stringname5, bool px, double lam);
RcppExport SEXP _CoMM_CoMM_S4_testing(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP stringname4SEXP, SEXP stringname5SEXP, SEXP pxSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname4(stringname4SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname5(stringname5SEXP);
    Rcpp::traits::input_parameter< bool >::type px(pxSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_S4_testing(stringname1, stringname2, stringname3, stringname4, stringname5, px, lam));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_S4_testing_mt
List CoMM_S4_testing_mt(std::string stringname1, std::string stringname2, std::string stringname3, std::string stringname4, std::string stringname5, bool px, double lam, int coreNum);
RcppExport SEXP _CoMM_CoMM_S4_testing_mt(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP stringname4SEXP, SEXP stringname5SEXP, SEXP pxSEXP, SEXP lamSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname4(stringname4SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname5(stringname5SEXP);
    Rcpp::traits::input_parameter< bool >::type px(pxSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_S4_testing_mt(stringname1, stringname2, stringname3, stringname4, stringname5, px, lam, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_covar_pxem
List CoMM_covar_pxem(const arma::vec& y, const arma::vec& z, const arma::mat& x1, const arma::mat& x2, const arma::mat& w1, const arma::mat& w2, const int constr, const double epsStopLogLik, const int maxIter, const int pxem_indicator);
RcppExport SEXP _CoMM_CoMM_covar_pxem(SEXP ySEXP, SEXP zSEXP, SEXP x1SEXP, SEXP x2SEXP, SEXP w1SEXP, SEXP w2SEXP, SEXP constrSEXP, SEXP epsStopLogLikSEXP, SEXP maxIterSEXP, SEXP pxem_indicatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const int >::type constr(constrSEXP);
    Rcpp::traits::input_parameter< const double >::type epsStopLogLik(epsStopLogLikSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const int >::type pxem_indicator(pxem_indicatorSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_covar_pxem(y, z, x1, x2, w1, w2, constr, epsStopLogLik, maxIter, pxem_indicator));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_testing_run_mt
Rcpp::List CoMM_testing_run_mt(std::string stringname1, std::string stringname2, std::string stringname3, std::string stringname4, std::string stringname5, int whCol, int bw, const int coreNum);
RcppExport SEXP _CoMM_CoMM_testing_run_mt(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP stringname4SEXP, SEXP stringname5SEXP, SEXP whColSEXP, SEXP bwSEXP, SEXP coreNumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname4(stringname4SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname5(stringname5SEXP);
    Rcpp::traits::input_parameter< int >::type whCol(whColSEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< const int >::type coreNum(coreNumSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_testing_run_mt(stringname1, stringname2, stringname3, stringname4, stringname5, whCol, bw, coreNum));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_testing_run
Rcpp::List CoMM_testing_run(std::string stringname1, std::string stringname2, std::string stringname3, std::string stringname4, std::string stringname5, int whCol, int bw);
RcppExport SEXP _CoMM_CoMM_testing_run(SEXP stringname1SEXP, SEXP stringname2SEXP, SEXP stringname3SEXP, SEXP stringname4SEXP, SEXP stringname5SEXP, SEXP whColSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type stringname1(stringname1SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname2(stringname2SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname3(stringname3SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname4(stringname4SEXP);
    Rcpp::traits::input_parameter< std::string >::type stringname5(stringname5SEXP);
    Rcpp::traits::input_parameter< int >::type whCol(whColSEXP);
    Rcpp::traits::input_parameter< int >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_testing_run(stringname1, stringname2, stringname3, stringname4, stringname5, whCol, bw));
    return rcpp_result_gen;
END_RCPP
}
// CoMM_S2
List CoMM_S2(arma::mat xr, arma::vec yr, arma::vec Wr, arma::vec& hatmur, arma::vec& hatsr, arma::mat& Rr, SEXP opts, bool px);
RcppExport SEXP _CoMM_CoMM_S2(SEXP xrSEXP, SEXP yrSEXP, SEXP WrSEXP, SEXP hatmurSEXP, SEXP hatsrSEXP, SEXP RrSEXP, SEXP optsSEXP, SEXP pxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Wr(WrSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hatmur(hatmurSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hatsr(hatsrSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Rr(RrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type opts(optsSEXP);
    Rcpp::traits::input_parameter< bool >::type px(pxSEXP);
    rcpp_result_gen = Rcpp::wrap(CoMM_S2(xr, yr, Wr, hatmur, hatsr, Rr, opts, px));
    return rcpp_result_gen;
END_RCPP
}
// lmm_pxem
Rcpp::List lmm_pxem(const arma::vec y, const arma::mat w, const arma::mat x, const int maxIter);
RcppExport SEXP _CoMM_lmm_pxem(SEXP ySEXP, SEXP wSEXP, SEXP xSEXP, SEXP maxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(lmm_pxem(y, w, x, maxIter));
    return rcpp_result_gen;
END_RCPP
}
// lmm_pxem_test
Rcpp::List lmm_pxem_test(const arma::vec y, const arma::mat w, const arma::mat x, const int maxIter);
RcppExport SEXP _CoMM_lmm_pxem_test(SEXP ySEXP, SEXP wSEXP, SEXP xSEXP, SEXP maxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(lmm_pxem_test(y, w, x, maxIter));
    return rcpp_result_gen;
END_RCPP
}
// lmm_pxem2
Rcpp::List lmm_pxem2(const arma::vec y, const arma::mat w, const arma::mat x, const int maxIter);
RcppExport SEXP _CoMM_lmm_pxem2(SEXP ySEXP, SEXP wSEXP, SEXP xSEXP, SEXP maxIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    rcpp_result_gen = Rcpp::wrap(lmm_pxem2(y, w, x, maxIter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CoMM_CoMM_S2_paral_testing", (DL_FUNC) &_CoMM_CoMM_S2_paral_testing, 8},
    {"_CoMM_CoMM_S2_testing", (DL_FUNC) &_CoMM_CoMM_S2_testing, 8},
    {"_CoMM_CoMM_S4", (DL_FUNC) &_CoMM_CoMM_S4, 6},
    {"_CoMM_read_eqtls", (DL_FUNC) &_CoMM_read_eqtls, 2},
    {"_CoMM_CoMM_S4_testing", (DL_FUNC) &_CoMM_CoMM_S4_testing, 7},
    {"_CoMM_CoMM_S4_testing_mt", (DL_FUNC) &_CoMM_CoMM_S4_testing_mt, 8},
    {"_CoMM_CoMM_covar_pxem", (DL_FUNC) &_CoMM_CoMM_covar_pxem, 10},
    {"_CoMM_CoMM_testing_run_mt", (DL_FUNC) &_CoMM_CoMM_testing_run_mt, 8},
    {"_CoMM_CoMM_testing_run", (DL_FUNC) &_CoMM_CoMM_testing_run, 7},
    {"_CoMM_CoMM_S2", (DL_FUNC) &_CoMM_CoMM_S2, 8},
    {"_CoMM_lmm_pxem", (DL_FUNC) &_CoMM_lmm_pxem, 4},
    {"_CoMM_lmm_pxem_test", (DL_FUNC) &_CoMM_lmm_pxem_test, 4},
    {"_CoMM_lmm_pxem2", (DL_FUNC) &_CoMM_lmm_pxem2, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CoMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
